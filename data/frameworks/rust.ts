import type { Framework } from "./types"

export const rustFrameworks: Record<string, Framework> = {
  Rocket: {
    name: "Rocket",
    description: "Framework web pour Rust axé sur la facilité d'utilisation et la flexibilité",
    usedFor: "Applications web, APIs RESTful, microservices",
    features: ["Routage type-safe", "Gestion des formulaires", "Templating", "JSON", "Sessions"],
    officialWebsite: "https://rocket.rs/",
    uniqueSellingPoint: "Framework web Rust type-safe et intuitif",
    bestFor: "Applications web Rust nécessitant une sécurité de type et une syntaxe élégante",
    version: "0.5",
    documentation: "https://rocket.rs/v0.5/guide/",
  },
  Actix: {
    name: "Actix",
    description: "Framework web pour Rust basé sur le modèle d'acteur",
    usedFor: "Applications web hautes performances, APIs RESTful, microservices",
    features: ["Basé sur les acteurs", "Performances exceptionnelles", "WebSockets", "Streaming HTTP", "Middleware"],
    officialWebsite: "https://actix.rs/",
    uniqueSellingPoint: "Framework web Rust ultra-performant basé sur le modèle d'acteur",
    bestFor: "Applications web Rust nécessitant des performances maximales",
    version: "4.0",
    documentation: "https://actix.rs/docs/",
  },
  Yew: {
    name: "Yew",
    description: "Framework moderne pour créer des applications web multi-thread en Rust et WebAssembly",
    usedFor: "Applications web côté client, applications WebAssembly, interfaces utilisateur",
    features: ["Composants", "HTML déclaratif", "Concurrence", "Agents", "Services"],
    officialWebsite: "https://yew.rs/",
    uniqueSellingPoint: "Framework React-like pour Rust et WebAssembly",
    bestFor: "Applications web côté client en Rust nécessitant des performances natives",
    version: "0.21",
    documentation: "https://yew.rs/docs/",
  },
  Tauri: {
    name: "Tauri",
    description: "Framework pour construire des applications de bureau légères avec des technologies web",
    usedFor: "Applications de bureau multiplateformes, alternatives à Electron",
    features: ["Empreinte mémoire réduite", "Sécurité", "Interface native", "Performances", "Personnalisation"],
    officialWebsite: "https://tauri.app/",
    uniqueSellingPoint: "Applications de bureau légères et sécurisées avec des technologies web et Rust",
    bestFor: "Applications de bureau nécessitant des performances et une empreinte mémoire réduite",
    version: "1.5",
    documentation: "https://tauri.app/v1/guides/",
  },
  Tokio: {
    name: "Tokio",
    description: "Plateforme asynchrone pour Rust",
    usedFor: "Applications réseau, services concurrents, I/O asynchrone",
    features: ["I/O asynchrone", "Multithreading", "Timers", "Synchronisation", "Tâches"],
    officialWebsite: "https://tokio.rs/",
    uniqueSellingPoint: "Runtime asynchrone performant et fiable pour Rust",
    bestFor: "Applications Rust nécessitant des I/O asynchrones et une concurrence efficace",
    version: "1.34",
    documentation: "https://tokio.rs/tokio/tutorial",
  },
  Serde: {
    name: "Serde",
    description: "Framework de sérialisation et désérialisation pour Rust",
    usedFor: "Traitement de données, APIs, stockage, configuration",
    features: [
      "Sérialisation/désérialisation générique",
      "Support pour JSON, YAML, TOML, etc.",
      "Dérivation automatique",
      "Performances",
      "Flexibilité",
    ],
    officialWebsite: "https://serde.rs/",
    uniqueSellingPoint: "Sérialisation et désérialisation de données efficace et type-safe en Rust",
    bestFor: "Applications Rust manipulant des données structurées",
    version: "1.0",
    documentation: "https://serde.rs/",
  },
}

